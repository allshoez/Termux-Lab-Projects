    #!/data/data/com.termux/files/usr/bin/env bash                  # CatBot Termux Pro - Header [+] + Menu Data + Delete Pilih / All

DATA_FILE="memory/data.json"    
# Warna
YELLOW='\033[1;33m'
RED='\033[1;31m'
GREEN='\033[1;32m'
CYAN='\033[1;36m'
RESET='\033[0m'

# Spinner sederhana
spin() {
    local pid=$1
    local delay=0.1
    local spinstr='|/-\'
    while [ -d /proc/$pid ]; do
        for i in $(seq 0 3); do
            printf "\r‚è≥ ${spinstr:$i:1} Loading..."
            sleep $delay
        done
    done
    printf "\r"
}

# Ambil jawaban
get_response() {
    local question="$1"
    if [ -f "$DATA_FILE" ]; then
        local answer=$(jq -r --arg q "$question" '.[$q]' "$DATA_FILE")
        echo "$answer"
    else
        echo ""
    fi
}

# Simpan jawaban baru
save_answer() {
    local question="$1"
    local answer="$2"
    [ ! -f "$DATA_FILE" ] && echo "{}" > "$DATA_FILE"
    tmp=$(mktemp)
    jq --arg t "$question" --arg j "$answer" '. + {($t): $j}' "$DATA_FILE" > "$tmp" && mv "$tmp" "$DATA_FILE"
}

# Delete data
delete_data() {
    while true; do
        clear
        echo -e "${CYAN}=== üóë Delete Data ===${RESET}"
        echo -e "[1] Hapus data pilihan"
        echo -e "[2] Hapus ALL data"
        echo -e "[X] Back"
        echo ""

        read -p "‚û° Pilih menu: " opt
        case "$opt" in
            1)
                mapfile -t items < <(jq -r 'to_entries[] | "\(.key) -> \(.value)"' "$DATA_FILE")
                if [ ${#items[@]} -eq 0 ]; then
                    echo -e "${RED}‚ö†Ô∏è Tidak ada data!${RESET}"
                    sleep 1
                    continue
                fi

                printf "%s\n" "${items[@]}" | nl -w2 -s". "
                echo ""
                read -p "Nomor data yang mau dihapus (pisahkan dengan koma, ex: 1,3,5): " nums

                IFS=',' read -ra arr <<< "$nums"
                for num in "${arr[@]}"; do
                    if ! [[ "$num" =~ ^[0-9]+$ ]] || [ "$num" -lt 1 ] || [ "$num" -gt ${#items[@]} ]; then
                        echo -e "${RED}Nomor $num tidak valid, skip...${RESET}"
                        continue
                    fi
                    key=$(jq -r "to_entries[$((num-1))].key" "$DATA_FILE")
                    jq "del(.\"$key\")" "$DATA_FILE" > tmp.json && mv tmp.json "$DATA_FILE"
                    echo -e "${GREEN}Data '$key' terhapus!${RESET}"
                done
                read -p "Enter untuk lanjut..."
                ;;
            2)
                read -p "‚ö†Ô∏è Yakin hapus semua data? (y/n): " confirm
                if [[ "$confirm" =~ ^[Yy]$ ]]; then
                    echo "{}" > "$DATA_FILE"
                    echo -e "${GREEN}Semua data berhasil dihapus!${RESET}"
                else
                    echo -e "${CYAN}Batal hapus semua data.${RESET}"
                fi
                sleep 1
                ;;
            X|x) break ;;
            *) echo "Pilihan salah"; sleep 1 ;;
        esac
    done
}

# Menu data
menu_data() {
    while true; do
        clear
        echo -e "${CYAN}=== üòé CatBot Menu ===${RESET}"
        echo -e "[1] = Lihat data"
        echo -e "[2] = Edit data"
        echo -e "[3] = Delete data"
        echo -e "[X] = Back"
        echo ""

        read -p "‚û° Pilih menu: " opt
        case "$opt" in
            1) jq . "$DATA_FILE" 2>/dev/null || echo "{}"; read -p "Enter untuk lanjut..." ;;
            2) nano "$DATA_FILE" ;;
            3) delete_data ;;
            X|x) break ;;
            *) echo "Pilihan salah"; sleep 1 ;;
        esac
    done
}

# Loop utama
while true; do
    clear
    echo -e "${CYAN}=== üòé CatBot === [+]${RESET}"
    echo ""
    read -p "$(echo -e "${YELLOW}üòé you: ${RESET}")" user_input

    # Menu data
    if [[ "$user_input" == "+" ]]; then
        menu_data
        continue
    fi

    # Exit
    [[ "$user_input" =~ ^[Xx]$ ]] && { echo -e "${CYAN} ü§ñ CatBot: Sampai jumpa! üëã${RESET}"; break; }

    # Spinner
    sleep 0.05 & pid=$!
    spin $pid
    wait $pid

    response=$(get_response "$user_input")
    if [ -n "$response" ] && [ "$response" != "null" ]; then
        echo -e "${YELLOW}ü§ñ CatBot: ${RESET}$response"
    else
        echo -e "${YELLOW}ü§ñ CatBot: Maaf, saya belum tahu jawabannya.${RESET}"
        echo -e "${RED} A) Ajari jawaban baru${RESET}"
        echo -e "${YELLOW} B) Lewati${RESET}"
        echo -e "${GREEN} C) Keluar${RESET}"
        read -p "$(echo -e "${YELLOW}> ${RESET}")" pilihan
        case "$pilihan" in
            [Aa])
                read -p "$(echo -e "${YELLOW}Masukkan jawaban: ${RESET}")" new_answer
                echo -e "Jawaban yang akan disimpan: $new_answer"
                read -p "$(echo -e "${YELLOW}Konfirmasi simpan? (y/n): ${RESET}")" confirm
                if [[ "$confirm" =~ ^[Yy]$ ]]; then
                    save_answer "$user_input" "$new_answer"
                    echo -e "${CYAN} ü§ñ CatBot: Terima kasih, saya sudah belajar!${RESET}"
                else
                    echo -e "${CYAN} ü§ñ CatBot: Jawaban dibatalkan.${RESET}"
                fi
                ;;
            [Bb]) echo -e "${CYAN}ü§ñ CatBot: Oke, lanjut...${RESET}" ;;
            [Cc]) echo -e "${CYAN}ü§ñ CatBot: Sampai jumpa! üëã${RESET}"; break ;;
            *) echo -e "${CYAN} ü§ñ CatBot: Pilihan tidak dikenal.${RESET}" ;;
        esac
    fi
    read -p "Enter untuk lanjut..."
done